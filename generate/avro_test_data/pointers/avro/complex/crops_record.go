// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
package complex

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Crops_record struct {
	Height float64 `json:"height"`

	Name string `json:"name"`

	Path string `json:"path"`

	RelativePath string `json:"relativePath"`

	Width float64 `json:"width"`
}

const Crops_recordAvroCRC64Fingerprint = "\xe2×‡WxM\xbf\xa3"

func NewCrops_record() *Crops_record {
	return &Crops_record{}
}

func DeserializeCrops_record(r io.Reader) (*Crops_record, error) {
	t := NewCrops_record()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeCrops_recordFromSchema(r io.Reader, schema string) (*Crops_record, error) {
	t := NewCrops_record()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeCrops_record(r *Crops_record, w io.Writer) error {
	var err error
	err = vm.WriteDouble(r.Height, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Path, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RelativePath, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Width, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Crops_record) Serialize(w io.Writer) error {
	return writeCrops_record(r, w)
}

func (r *Crops_record) Schema() string {
	return "{\"fields\":[{\"name\":\"height\",\"namespace\":\"crops\",\"type\":\"double\"},{\"name\":\"name\",\"namespace\":\"crops\",\"type\":\"string\"},{\"name\":\"path\",\"namespace\":\"crops\",\"type\":\"string\"},{\"name\":\"relativePath\",\"namespace\":\"crops\",\"type\":\"string\"},{\"name\":\"width\",\"namespace\":\"crops\",\"type\":\"double\"}],\"name\":\"crops.crops_record\",\"type\":\"record\"}"
}

func (r *Crops_record) SchemaName() string {
	return "crops.crops_record"
}

func (_ *Crops_record) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Crops_record) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Crops_record) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Crops_record) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Crops_record) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Crops_record) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Crops_record) SetString(v string)   { panic("Unsupported operation") }
func (_ *Crops_record) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Crops_record) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Double{Target: &r.Height}
	case 1:
		return &types.String{Target: &r.Name}
	case 2:
		return &types.String{Target: &r.Path}
	case 3:
		return &types.String{Target: &r.RelativePath}
	case 4:
		return &types.Double{Target: &r.Width}
	}
	panic("Unknown field index")
}

func (r *Crops_record) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Crops_record) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *Crops_record) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Crops_record) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Crops_record) Finalize()                        {}

func (_ *Crops_record) AvroCRC64Fingerprint() []byte {
	return []byte(Crops_recordAvroCRC64Fingerprint)
}
