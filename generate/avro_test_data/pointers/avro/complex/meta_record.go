// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
package complex

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Meta_record struct {
	Description string `json:"description"`

	SiteName string `json:"siteName"`
}

const Meta_recordAvroCRC64Fingerprint = "'\xf8\xd4O)\x13\xaf*"

func NewMeta_record() *Meta_record {
	return &Meta_record{}
}

func DeserializeMeta_record(r io.Reader) (*Meta_record, error) {
	t := NewMeta_record()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeMeta_recordFromSchema(r io.Reader, schema string) (*Meta_record, error) {
	t := NewMeta_record()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeMeta_record(r *Meta_record, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Description, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.SiteName, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Meta_record) Serialize(w io.Writer) error {
	return writeMeta_record(r, w)
}

func (r *Meta_record) Schema() string {
	return "{\"fields\":[{\"name\":\"description\",\"namespace\":\"URL.meta\",\"type\":\"string\"},{\"name\":\"siteName\",\"namespace\":\"URL.meta\",\"type\":\"string\"}],\"name\":\"URL.meta.meta_record\",\"type\":\"record\"}"
}

func (r *Meta_record) SchemaName() string {
	return "URL.meta.meta_record"
}

func (_ *Meta_record) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Meta_record) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Meta_record) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Meta_record) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Meta_record) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Meta_record) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Meta_record) SetString(v string)   { panic("Unsupported operation") }
func (_ *Meta_record) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Meta_record) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Description}
	case 1:
		return &types.String{Target: &r.SiteName}
	}
	panic("Unknown field index")
}

func (r *Meta_record) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Meta_record) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *Meta_record) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Meta_record) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Meta_record) Finalize()                        {}

func (_ *Meta_record) AvroCRC64Fingerprint() []byte {
	return []byte(Meta_recordAvroCRC64Fingerprint)
}
