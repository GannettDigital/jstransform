// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
package times

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Times struct {
	// The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.
	AvroWriteTime int64 `json:"AvroWriteTime"`
	// This is set to true when the Avro data is recording a delete in the source data.
	AvroDeleted bool `json:"AvroDeleted"`

	NonRequiredDate *UnionNullLong `json:"nonRequiredDate"`

	RequiredDate int64 `json:"requiredDate"`
}

const TimesAvroCRC64Fingerprint = "\x16\xe8\xc3\xdec`E."

func NewTimes() *Times {
	return &Times{}
}

func DeserializeTimes(r io.Reader) (*Times, error) {
	t := NewTimes()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeTimesFromSchema(r io.Reader, schema string) (*Times, error) {
	t := NewTimes()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeTimes(r *Times, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.AvroWriteTime, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.AvroDeleted, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.NonRequiredDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.RequiredDate, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Times) Serialize(w io.Writer) error {
	return writeTimes(r, w)
}

func (r *Times) Schema() string {
	return "{\"fields\":[{\"doc\":\"The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.\",\"logicalType\":\"timestamp-millis\",\"name\":\"AvroWriteTime\",\"type\":\"long\"},{\"default\":false,\"doc\":\"This is set to true when the Avro data is recording a delete in the source data.\",\"name\":\"AvroDeleted\",\"type\":\"boolean\"},{\"name\":\"nonRequiredDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"requiredDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Times\",\"type\":\"record\"}"
}

func (r *Times) SchemaName() string {
	return "Times"
}

func (_ *Times) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Times) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Times) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Times) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Times) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Times) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Times) SetString(v string)   { panic("Unsupported operation") }
func (_ *Times) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Times) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.AvroWriteTime}
	case 1:
		return &types.Boolean{Target: &r.AvroDeleted}
	case 2:
		r.NonRequiredDate = NewUnionNullLong()

		return r.NonRequiredDate
	case 3:
		return &types.Long{Target: &r.RequiredDate}
	}
	panic("Unknown field index")
}

func (r *Times) SetDefault(i int) {
	switch i {
	case 1:
		r.AvroDeleted = false
		return
	}
	panic("Unknown field index")
}

func (r *Times) NullField(i int) {
	switch i {
	case 2:
		r.NonRequiredDate = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ *Times) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Times) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Times) Finalize()                        {}

func (_ *Times) AvroCRC64Fingerprint() []byte {
	return []byte(TimesAvroCRC64Fingerprint)
}
