// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
package timespointers

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type TimesPointers struct {
	// The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.
	AvroWriteTime int64 `json:"AvroWriteTime"`
	// This is set to true when the Avro data is recording a delete in the source data.
	AvroDeleted bool `json:"AvroDeleted"`

	FactCheckClaims []*FactCheckClaims_record `json:"factCheckClaims"`

	NonRequiredDate *UnionNullLong `json:"nonRequiredDate"`

	RequiredDate int64 `json:"requiredDate"`
}

const TimesPointersAvroCRC64Fingerprint = "D{$\x8c\xf3'^\xa0"

func NewTimesPointers() *TimesPointers {
	return &TimesPointers{}
}

func DeserializeTimesPointers(r io.Reader) (*TimesPointers, error) {
	t := NewTimesPointers()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeTimesPointersFromSchema(r io.Reader, schema string) (*TimesPointers, error) {
	t := NewTimesPointers()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeTimesPointers(r *TimesPointers, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.AvroWriteTime, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.AvroDeleted, w)
	if err != nil {
		return err
	}
	err = writeArrayFactCheckClaims_record(r.FactCheckClaims, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.NonRequiredDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.RequiredDate, w)
	if err != nil {
		return err
	}
	return err
}

func (r *TimesPointers) Serialize(w io.Writer) error {
	return writeTimesPointers(r, w)
}

func (r *TimesPointers) Schema() string {
	return "{\"fields\":[{\"doc\":\"The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.\",\"logicalType\":\"timestamp-millis\",\"name\":\"AvroWriteTime\",\"type\":\"long\"},{\"default\":false,\"doc\":\"This is set to true when the Avro data is recording a delete in the source data.\",\"name\":\"AvroDeleted\",\"type\":\"boolean\"},{\"name\":\"factCheckClaims\",\"type\":{\"items\":{\"fields\":[{\"name\":\"appearanceURLs\",\"namespace\":\"factCheckClaims\",\"type\":{\"items\":{\"fields\":[{\"default\":false,\"name\":\"original\",\"namespace\":\"factCheckClaims.appearanceURLs\",\"type\":\"boolean\"},{\"name\":\"url\",\"namespace\":\"factCheckClaims.appearanceURLs\",\"type\":\"string\"}],\"name\":\"appearanceURLs_record\",\"namespace\":\"factCheckClaims.appearanceURLs\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"author\",\"namespace\":\"factCheckClaims\",\"type\":[\"null\",\"string\"]},{\"name\":\"claim\",\"namespace\":\"factCheckClaims\",\"type\":[\"null\",\"string\"]},{\"name\":\"date\",\"namespace\":\"factCheckClaims\",\"type\":[\"null\",\"string\"]},{\"name\":\"rating\",\"namespace\":\"factCheckClaims\",\"type\":[\"null\",\"string\"]}],\"name\":\"factCheckClaims_record\",\"namespace\":\"factCheckClaims\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"nonRequiredDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"requiredDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"TimesPointers\",\"type\":\"record\"}"
}

func (r *TimesPointers) SchemaName() string {
	return "TimesPointers"
}

func (_ *TimesPointers) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *TimesPointers) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *TimesPointers) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *TimesPointers) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *TimesPointers) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *TimesPointers) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *TimesPointers) SetString(v string)   { panic("Unsupported operation") }
func (_ *TimesPointers) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TimesPointers) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.AvroWriteTime}
	case 1:
		return &types.Boolean{Target: &r.AvroDeleted}
	case 2:
		r.FactCheckClaims = make([]*FactCheckClaims_record, 0)

		return &ArrayFactCheckClaims_recordWrapper{Target: &r.FactCheckClaims}
	case 3:
		r.NonRequiredDate = NewUnionNullLong()

		return r.NonRequiredDate
	case 4:
		return &types.Long{Target: &r.RequiredDate}
	}
	panic("Unknown field index")
}

func (r *TimesPointers) SetDefault(i int) {
	switch i {
	case 1:
		r.AvroDeleted = false
		return
	}
	panic("Unknown field index")
}

func (r *TimesPointers) NullField(i int) {
	switch i {
	case 3:
		r.NonRequiredDate = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ *TimesPointers) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *TimesPointers) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *TimesPointers) Finalize()                        {}

func (_ *TimesPointers) AvroCRC64Fingerprint() []byte {
	return []byte(TimesPointersAvroCRC64Fingerprint)
}
