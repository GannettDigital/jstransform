// Package generate implements a tooling to generate Golang structs from a JSON schema file.
// It is intended to be used with the go generate, https://blog.golang.org/generate
package generate

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"io"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/GannettDigital/jstransform/jsonschema"
)

const disclaimer = "// This file was autogenerated by https://github.com/GannettDigital/jstransform\n\n"

// BuildStructs takes a JSON Schema and generates Golang structs that match the schema.
// The structs include struct tags for marshaling/unmarshaling to/from JSON.
// The JSON schema can specify more information than the structs enforce (like field size) and so validation of
// any JSON generated from the structs is still necessary.
// outputPath defaults to the current working directory if undefined
// The package name is set to the outputPath directory name.
func BuildStructs(schemaPath string, outputPath string) error {
	if outputPath == "" {
		wd, err := os.Getwd()
		if err != nil {
			return fmt.Errorf("failed to determine working directory: %v", err)
		}
		outputPath = wd
	}

	packageName := filepath.Base(outputPath)

	oneOfTypes, err := jsonschema.SchemaOneOfTypes(schemaPath)
	if err == nil {
		oneOfTypes = append(oneOfTypes, strings.Split(filepath.Base(schemaPath), ".")[0])
	}

	for _, oneOf := range oneOfTypes {
		path := filepath.Join(outputPath, oneOf+".go")
		gfile, err := os.Create(path)
		if err != nil {
			return fmt.Errorf("failed to open file %q: %v", path, err)
		}
		defer gfile.Close()

		if err := generateGoStruct(schemaPath, packageName, oneOf, gfile); err != nil {
			return fmt.Errorf("failed to generate %s.go: %v", oneOf, err)
		}
	}

	return nil
}

func generateGoStruct(schemaPath, packageName, oneOfType string, w io.Writer) error {
	schema, err := jsonschema.SchemaFromFile(schemaPath, oneOfType)
	if err != nil {
		return err
	}

	required := map[string]bool{}
	for _, fname := range schema.Required {
		required[fname] = true
	}
	generated := &generatedStruct{extractedField: extractedField{
		name:           oneOfType,
		fields:         make(map[string]*extractedField),
		requiredFields: required,
	},
		packageName: packageName,
	}
	if err := jsonschema.Walk(schema, generated.walkFunc); err != nil {
		return fmt.Errorf("failed to walk %q for oneOfType %q: %v", schemaPath, oneOfType, err)
	}

	return generated.write(w)
}

// extractedField represents a Golang struct field as extracted from a JSON schema file. It is an intermediate format
// that is populated while parsing the JSON schema file then used when generating the Golang code for the struct.
type extractedField struct {
	array          bool
	fields         extractedFields
	jsonName       string
	jsonType       string
	name           string
	requiredFields map[string]bool
}

// write outputs the Golang representation of this field to the writer with prefix before each line.
// It handles inline structs by calling this method recursively adding a new \t to the prefix for each layer.
// If required is set to false 'omitempty' is added in the JSON struct tag for the field
func (ef *extractedField) write(w io.Writer, prefix string, required bool) error {
	structTag := "`"
	structTag = structTag + fmt.Sprintf(`json:"%s`, ef.jsonName)
	if !required {
		structTag = structTag + ",omitempty"
	}
	structTag = structTag + `"` + "`\n"

	if ef.jsonType != "object" {
		_, err := w.Write([]byte(fmt.Sprintf("%s%s\t%s\t%s", prefix, ef.name, goType(ef.jsonType, ef.array), structTag)))
		return err
	}

	if _, err := w.Write([]byte(fmt.Sprintf("%s%s\t%s {\n", prefix, ef.name, goType(ef.jsonType, ef.array)))); err != nil {
		return err
	}

	for _, field := range ef.fields.Sorted() {
		fieldRequired := ef.requiredFields[field.jsonName]
		if err := field.write(w, prefix+"\t", fieldRequired); err != nil {
			return fmt.Errorf("failed writing field %q: %v", field.name, err)
		}
	}

	if _, err := w.Write([]byte(fmt.Sprintf("%s\t}\t%s", prefix, structTag))); err != nil {
		return err
	}
	return nil
}

// extractedFields is a map of fields keyed on the field name.
type extractedFields map[string]*extractedField

// Sorted will return the fields in a sorted list. The sort is a string sort on the keys
func (efs extractedFields) Sorted() []*extractedField {
	var sorted []*extractedField
	var sortedKeys sort.StringSlice
	fieldsByName := make(map[string]*extractedField)
	for _, f := range efs {
		sortedKeys = append(sortedKeys, f.name)
		fieldsByName[f.name] = f
	}

	sortedKeys.Sort()

	for _, key := range sortedKeys {
		sorted = append(sorted, fieldsByName[key])
	}

	return sorted
}

type generatedStruct struct {
	extractedField

	packageName string
}

// walkFunc is a jsonschema.WalkFunc which builds the fields in the generatedStructFile as the JSON schema file is
// walked.
func (gen *generatedStruct) walkFunc(path string, i jsonschema.Instance, raw json.RawMessage) error {
	if err := addField(gen.fields, splitJSONPath(path), i); err != nil {
		return err
	}
	return nil
}

// write will write the generated file to the given io.Writer.
func (gen *generatedStruct) write(w io.Writer) error {
	buf := &bytes.Buffer{} // the formatter uses the entire output, so buffer for that

	if _, err := buf.Write([]byte(fmt.Sprintf("package %s\n\n%s", gen.packageName, disclaimer))); err != nil {
		return fmt.Errorf("failed writing struct: %v", err)
	}

	if _, err := buf.Write([]byte(fmt.Sprintf("type %s struct {\n", exportedName(gen.name)))); err != nil {
		return fmt.Errorf("failed writing struct: %v", err)
	}
	for _, field := range gen.fields.Sorted() {
		req := gen.requiredFields[field.jsonName]
		if err := field.write(buf, "\t", req); err != nil {
			return fmt.Errorf("failed writing field %q: %v", field.name, err)
		}
	}

	if _, err := buf.Write([]byte("}")); err != nil {
		return fmt.Errorf("failed writing struct: %v", err)
	}

	final, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("failed to format source: %v", err)
	}

	if _, err := w.Write(final); err != nil {
		return fmt.Errorf("error writing to io.Writer: %v", err)
	}
	return nil
}

// addField will create a new field or add to an existing field in the extractedFields.
// Nested fields are handled by recursively calling this function until the leaf field is reached.
// For all fields the name and jsonType are set, for arrays the array bool is set for true and for JSON objects,
// the fields map is created and if it exists the requiredFields section populated.
func addField(fields extractedFields, tree []string, inst jsonschema.Instance) error {
	if len(tree) > 1 {
		if f, ok := fields[tree[0]]; ok {
			return addField(f.fields, tree[1:], inst)
		}
		f := &extractedField{jsonName: tree[0], jsonType: "object", name: exportedName(tree[0]), fields: make(map[string]*extractedField)}
		fields[tree[0]] = f
		if err := addField(f.fields, tree[1:], inst); err != nil {
			return fmt.Errorf("failed field %q: %v", tree[0], err)
		}
		return nil
	}

	f := &extractedField{
		name:     exportedName(tree[0]),
		jsonName: tree[0],
		jsonType: inst.Type,
	}
	// Second processing of an array type
	if exists, ok := fields[f.jsonName]; ok {
		f = exists
		if f.array && f.jsonType == "" {
			f.jsonType = inst.Type
		} else {
			return fmt.Errorf("field %q already exists but is not an array field", f.name)
		}
	}

	switch f.jsonType {
	case "array":
		f.jsonType = ""
		f.array = true
	case "object":
		f.requiredFields = make(map[string]bool)
		for _, name := range inst.Required {
			f.requiredFields[name] = true
		}
		f.fields = make(map[string]*extractedField)
	}

	fields[tree[0]] = f

	return nil
}

// exportedName returns a name that is usable as an exported field in Go.
// Only minimal checking on naming is done rather it is assumed the name from the JSON schema is reasonable any
// unacceptable names will likely fail during formatting.
func exportedName(name string) string {
	return strings.Title(name)
}

// goType maps a jsonType to a string representation of the go type.
// If Array is true it makes the type into an array.
func goType(jsonType string, array bool) string {
	var goType string
	switch jsonType {
	case "boolean":
		goType = "bool"
	case "number":
		goType = "float64"
	case "string":
		goType = "string"
	case "object":
		goType = "struct"
	}

	if array {
		return "[]" + goType
	}

	return goType
}

// splitJSONPath takes a JSON path and returns an array of path items each of which represents a JSON object with the
// name normalized in a way suitable for using it as a Go struct filed name.
func splitJSONPath(path string) []string {
	var tree []string
	for _, split := range strings.Split(path, ".") {
		if split == "$" {
			continue
		}
		if strings.HasSuffix(split, "[*]") {
			split = split[:len(split)-3]
		}

		tree = append(tree, split)
	}

	return tree
}
