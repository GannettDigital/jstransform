// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
package arrays

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Parents_record struct {
	Count int64 `json:"count"`

	Children []string `json:"children"`

	Date int64 `json:"date"`

	Info *Info_record `json:"info"`
}

const Parents_recordAvroCRC64Fingerprint = "\xa8\x8e\x82\x87s\xcbB\xc2"

func NewParents_record() *Parents_record {
	return &Parents_record{}
}

func DeserializeParents_record(r io.Reader) (*Parents_record, error) {
	t := NewParents_record()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeParents_recordFromSchema(r io.Reader, schema string) (*Parents_record, error) {
	t := NewParents_record()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeParents_record(r *Parents_record, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.Count, w)
	if err != nil {
		return err
	}
	err = writeArrayString(r.Children, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Date, w)
	if err != nil {
		return err
	}
	err = writeInfo_record(r.Info, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Parents_record) Serialize(w io.Writer) error {
	return writeParents_record(r, w)
}

func (r *Parents_record) Schema() string {
	return "{\"fields\":[{\"name\":\"count\",\"namespace\":\"parents\",\"type\":\"long\"},{\"name\":\"children\",\"namespace\":\"parents\",\"type\":{\"items\":{\"type\":\"string\"},\"type\":\"array\"}},{\"name\":\"date\",\"namespace\":\"parents\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"info\",\"namespace\":\"parents\",\"type\":{\"fields\":[{\"name\":\"name\",\"namespace\":\"parents.info\",\"type\":\"string\"},{\"name\":\"age\",\"namespace\":\"parents.info\",\"type\":\"long\"}],\"name\":\"info_record\",\"namespace\":\"parents.info\",\"type\":\"record\"}}],\"name\":\"parents.parents_record\",\"type\":\"record\"}"
}

func (r *Parents_record) SchemaName() string {
	return "parents.parents_record"
}

func (_ *Parents_record) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Parents_record) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Parents_record) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Parents_record) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Parents_record) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Parents_record) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Parents_record) SetString(v string)   { panic("Unsupported operation") }
func (_ *Parents_record) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Parents_record) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.Count}
	case 1:
		r.Children = make([]string, 0)

		return &ArrayStringWrapper{Target: &r.Children}
	case 2:
		return &types.Long{Target: &r.Date}
	case 3:
		r.Info = NewInfo_record()

		return r.Info
	}
	panic("Unknown field index")
}

func (r *Parents_record) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Parents_record) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *Parents_record) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Parents_record) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Parents_record) Finalize()                        {}

func (_ *Parents_record) AvroCRC64Fingerprint() []byte {
	return []byte(Parents_recordAvroCRC64Fingerprint)
}
