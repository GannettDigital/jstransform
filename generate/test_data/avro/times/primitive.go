// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.

package times

import (
	"fmt"
	"io"
)

type ByteWriter interface {
	Grow(int)
	WriteByte(byte) error
}

func encodeInt(w io.Writer, byteCount int, encoded uint64) error {
	var err error
	var bb []byte
	bw, ok := w.(ByteWriter)
	// To avoid reallocations, grow capacity to the largest possible size
	// for this integer
	if ok {
		bw.Grow(byteCount)
	} else {
		bb = make([]byte, 0, byteCount)
	}

	if encoded == 0 {
		if bw != nil {
			err = bw.WriteByte(0)
			if err != nil {
				return err
			}
		} else {
			bb = append(bb, byte(0))
		}
	} else {
		for encoded > 0 {
			b := byte(encoded & 127)
			encoded = encoded >> 7
			if !(encoded == 0) {
				b |= 128
			}
			if bw != nil {
				err = bw.WriteByte(b)
				if err != nil {
					return err
				}
			} else {
				bb = append(bb, b)
			}
		}
	}
	if bw == nil {
		_, err := w.Write(bb)
		return err
	}
	return nil

}

func writeBool(r bool, w io.Writer) error {
	var b byte
	if r {
		b = byte(1)
	}

	var err error
	if bw, ok := w.(ByteWriter); ok {
		err = bw.WriteByte(b)
	} else {
		bb := make([]byte, 1)
		bb[0] = b
		_, err = w.Write(bb)
	}
	if err != nil {
		return err
	}
	return nil
}

func writeLong(r int64, w io.Writer) error {
	downShift := uint64(63)
	encoded := uint64((r << 1) ^ (r >> downShift))
	const maxByteSize = 10
	return encodeInt(w, maxByteSize, encoded)
}

func writeNull(_ interface{}, _ io.Writer) error {
	return nil
}

func writeTimes(r *Times, w io.Writer) error {
	var err error
	err = writeLong(r.AvroWriteTime, w)
	if err != nil {
		return err
	}
	err = writeBool(r.AvroDeleted, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.NonRequiredDate, w)
	if err != nil {
		return err
	}
	err = writeLong(r.RequiredDate, w)
	if err != nil {
		return err
	}

	return nil
}

func writeUnionNullLong(r *UnionNullLong, w io.Writer) error {
	err := writeLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullLongTypeEnumNull:
		return writeNull(r.Null, w)
	case UnionNullLongTypeEnumLong:
		return writeLong(r.Long, w)

	}
	return fmt.Errorf("invalid value for *UnionNullLong")
}
