// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.

package times

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type Times struct {

	// The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.
	AvroWriteTime int64

	// This is set to true when the Avro data is recording a delete in the source data.
	AvroDeleted     bool
	NonRequiredDate *UnionNullLong
	RequiredDate    int64
}

func NewTimesWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &Times{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeTimes(r io.Reader) (*Times, error) {
	t := NewTimes()

	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	return t, err
}

func NewTimes() *Times {
	return &Times{}
}

func (r *Times) Schema() string {
	return "{\"fields\":[{\"doc\":\"The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.\",\"logicalType\":\"timestamp-millis\",\"name\":\"AvroWriteTime\",\"type\":\"long\"},{\"default\":false,\"doc\":\"This is set to true when the Avro data is recording a delete in the source data.\",\"name\":\"AvroDeleted\",\"type\":\"boolean\"},{\"name\":\"nonRequiredDate\",\"type\":[\"null\",{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}]},{\"name\":\"requiredDate\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"Times\",\"type\":\"record\"}"
}

func (r *Times) SchemaName() string {
	return "Times"
}

func (r *Times) Serialize(w io.Writer) error {
	return writeTimes(r, w)
}

func (_ *Times) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Times) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Times) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Times) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Times) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Times) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Times) SetString(v string)   { panic("Unsupported operation") }
func (_ *Times) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *Times) Get(i int) types.Field {
	switch i {
	case 0:
		return (*types.Long)(&r.AvroWriteTime)
	case 1:
		return (*types.Boolean)(&r.AvroDeleted)
	case 2:
		r.NonRequiredDate = NewUnionNullLong()
		return r.NonRequiredDate
	case 3:
		return (*types.Long)(&r.RequiredDate)

	}
	panic("Unknown field index")
}
func (r *Times) SetDefault(i int) {
	switch i {
	case 1:
		r.AvroDeleted = false
		return

	}
	panic("Unknown field index")
}
func (_ *Times) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Times) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Times) Finalize()                        {}

type TimesReader struct {
	r io.Reader
	p *vm.Program
}

func NewTimesReader(r io.Reader) (*TimesReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewTimes()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &TimesReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *TimesReader) Read() (*Times, error) {
	t := NewTimes()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
