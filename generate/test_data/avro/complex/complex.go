// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.

package complex

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type Complex struct {

	// The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.
	AvroWriteTime int64

	// This is set to true when the Avro data is recording a delete in the source data.
	AvroDeleted    bool
	Height         *UnionNullLong
	SomeDateObj    *SomeDateObj_record
	Visible        bool
	Width          *UnionNullDouble
	Caption        string
	Credit         string
	Crops          []*Crops_record
	Cutline        *UnionNullString
	DatePhotoTaken string
	Orientation    string
	OriginalSize   *OriginalSize_record

	// a type
	Type string
	URL  *URL_record
}

func NewComplexWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &Complex{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeComplex(r io.Reader) (*Complex, error) {
	t := NewComplex()

	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	return t, err
}

func NewComplex() *Complex {
	return &Complex{}
}

func (r *Complex) Schema() string {
	return "{\"fields\":[{\"doc\":\"The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.\",\"logicalType\":\"timestamp-millis\",\"name\":\"AvroWriteTime\",\"type\":\"long\"},{\"default\":false,\"doc\":\"This is set to true when the Avro data is recording a delete in the source data.\",\"name\":\"AvroDeleted\",\"type\":\"boolean\"},{\"name\":\"height\",\"namespace\":\"Simple\",\"type\":[\"null\",\"long\"]},{\"default\":{},\"name\":\"someDateObj\",\"namespace\":\"Simple\",\"type\":{\"fields\":[{\"name\":\"dates\",\"namespace\":\"Simple.someDateObj\",\"type\":{\"items\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"},\"type\":\"array\"}}],\"name\":\"someDateObj_record\",\"namespace\":\"Simple.someDateObj\",\"type\":\"record\"}},{\"default\":false,\"name\":\"visible\",\"namespace\":\"Simple\",\"type\":\"boolean\"},{\"name\":\"width\",\"namespace\":\"Simple\",\"type\":[\"null\",\"double\"]},{\"name\":\"caption\",\"type\":\"string\"},{\"name\":\"credit\",\"type\":\"string\"},{\"name\":\"crops\",\"type\":{\"items\":{\"fields\":[{\"name\":\"height\",\"namespace\":\"crops\",\"type\":\"double\"},{\"name\":\"name\",\"namespace\":\"crops\",\"type\":\"string\"},{\"doc\":\"full path to the cropped image file\",\"name\":\"path\",\"namespace\":\"crops\",\"type\":\"string\"},{\"doc\":\"a long\",\"name\":\"relativePath\",\"namespace\":\"crops\",\"type\":\"string\"},{\"name\":\"width\",\"namespace\":\"crops\",\"type\":\"double\"}],\"name\":\"crops_record\",\"namespace\":\"crops\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"cutline\",\"type\":[\"null\",\"string\"]},{\"name\":\"datePhotoTaken\",\"type\":\"string\"},{\"name\":\"orientation\",\"type\":\"string\"},{\"name\":\"originalSize\",\"type\":{\"fields\":[{\"name\":\"height\",\"namespace\":\"originalSize\",\"type\":\"double\"},{\"name\":\"width\",\"namespace\":\"originalSize\",\"type\":\"double\"}],\"name\":\"originalSize_record\",\"namespace\":\"originalSize\",\"type\":\"record\"}},{\"doc\":\"a type\",\"name\":\"type\",\"type\":\"string\"},{\"name\":\"URL\",\"type\":{\"fields\":[{\"name\":\"absolute\",\"namespace\":\"URL\",\"type\":\"string\"},{\"name\":\"publish\",\"namespace\":\"URL\",\"type\":\"string\"}],\"name\":\"URL_record\",\"namespace\":\"URL\",\"type\":\"record\"}}],\"name\":\"Complex\",\"type\":\"record\"}"
}

func (r *Complex) SchemaName() string {
	return "Complex"
}

func (r *Complex) Serialize(w io.Writer) error {
	return writeComplex(r, w)
}

func (_ *Complex) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Complex) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Complex) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Complex) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Complex) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Complex) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Complex) SetString(v string)   { panic("Unsupported operation") }
func (_ *Complex) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *Complex) Get(i int) types.Field {
	switch i {
	case 0:
		return (*types.Long)(&r.AvroWriteTime)
	case 1:
		return (*types.Boolean)(&r.AvroDeleted)
	case 2:
		r.Height = NewUnionNullLong()
		return r.Height
	case 3:
		r.SomeDateObj = NewSomeDateObj_record()
		return r.SomeDateObj
	case 4:
		return (*types.Boolean)(&r.Visible)
	case 5:
		r.Width = NewUnionNullDouble()
		return r.Width
	case 6:
		return (*types.String)(&r.Caption)
	case 7:
		return (*types.String)(&r.Credit)
	case 8:
		r.Crops = make([]*Crops_record, 0)
		return (*ArrayCrops_recordWrapper)(&r.Crops)
	case 9:
		r.Cutline = NewUnionNullString()
		return r.Cutline
	case 10:
		return (*types.String)(&r.DatePhotoTaken)
	case 11:
		return (*types.String)(&r.Orientation)
	case 12:
		r.OriginalSize = NewOriginalSize_record()
		return r.OriginalSize
	case 13:
		return (*types.String)(&r.Type)
	case 14:
		r.URL = NewURL_record()
		return r.URL

	}
	panic("Unknown field index")
}
func (r *Complex) SetDefault(i int) {
	switch i {
	case 1:
		r.AvroDeleted = false
		return
	case 3:

		return
	case 4:
		r.Visible = false
		return

	}
	panic("Unknown field index")
}
func (_ *Complex) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Complex) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Complex) Finalize()                        {}

type ComplexReader struct {
	r io.Reader
	p *vm.Program
}

func NewComplexReader(r io.Reader) (*ComplexReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewComplex()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &ComplexReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *ComplexReader) Read() (*Complex, error) {
	t := NewComplex()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
