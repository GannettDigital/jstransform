// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
package complex

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type OriginalSize_record struct {
	Height float64 `json:"height"`

	Width float64 `json:"width"`
}

const OriginalSize_recordAvroCRC64Fingerprint = "c\xf9;]UFt\xa8"

func NewOriginalSize_record() *OriginalSize_record {
	return &OriginalSize_record{}
}

func DeserializeOriginalSize_record(r io.Reader) (*OriginalSize_record, error) {
	t := NewOriginalSize_record()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeOriginalSize_recordFromSchema(r io.Reader, schema string) (*OriginalSize_record, error) {
	t := NewOriginalSize_record()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeOriginalSize_record(r *OriginalSize_record, w io.Writer) error {
	var err error
	err = vm.WriteDouble(r.Height, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Width, w)
	if err != nil {
		return err
	}
	return err
}

func (r *OriginalSize_record) Serialize(w io.Writer) error {
	return writeOriginalSize_record(r, w)
}

func (r *OriginalSize_record) Schema() string {
	return "{\"fields\":[{\"name\":\"height\",\"namespace\":\"originalSize\",\"type\":\"double\"},{\"name\":\"width\",\"namespace\":\"originalSize\",\"type\":\"double\"}],\"name\":\"originalSize.originalSize_record\",\"type\":\"record\"}"
}

func (r *OriginalSize_record) SchemaName() string {
	return "originalSize.originalSize_record"
}

func (_ *OriginalSize_record) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetString(v string)   { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OriginalSize_record) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Double{Target: &r.Height}
	case 1:
		return &types.Double{Target: &r.Width}
	}
	panic("Unknown field index")
}

func (r *OriginalSize_record) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OriginalSize_record) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *OriginalSize_record) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *OriginalSize_record) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *OriginalSize_record) Finalize()                        {}

func (_ *OriginalSize_record) AvroCRC64Fingerprint() []byte {
	return []byte(OriginalSize_recordAvroCRC64Fingerprint)
}
