// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.

package complex

import (
	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
	"io"
)

type OriginalSize_record struct {
	Height float64
	Width  float64
}

func NewOriginalSize_recordWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &OriginalSize_record{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeOriginalSize_record(r io.Reader) (*OriginalSize_record, error) {
	t := NewOriginalSize_record()

	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	return t, err
}

func NewOriginalSize_record() *OriginalSize_record {
	return &OriginalSize_record{}
}

func (r *OriginalSize_record) Schema() string {
	return "{\"fields\":[{\"name\":\"height\",\"namespace\":\"originalSize\",\"type\":\"double\"},{\"name\":\"width\",\"namespace\":\"originalSize\",\"type\":\"double\"}],\"name\":\"originalSize_record\",\"namespace\":\"originalSize\",\"type\":\"record\"}"
}

func (r *OriginalSize_record) SchemaName() string {
	return "originalSize.originalSize_record"
}

func (r *OriginalSize_record) Serialize(w io.Writer) error {
	return writeOriginalSize_record(r, w)
}

func (_ *OriginalSize_record) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetString(v string)   { panic("Unsupported operation") }
func (_ *OriginalSize_record) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *OriginalSize_record) Get(i int) types.Field {
	switch i {
	case 0:
		return (*types.Double)(&r.Height)
	case 1:
		return (*types.Double)(&r.Width)

	}
	panic("Unknown field index")
}
func (r *OriginalSize_record) SetDefault(i int) {
	switch i {

	}
	panic("Unknown field index")
}
func (_ *OriginalSize_record) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *OriginalSize_record) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *OriginalSize_record) Finalize()                        {}

type OriginalSize_recordReader struct {
	r io.Reader
	p *vm.Program
}

func NewOriginalSize_recordReader(r io.Reader) (*OriginalSize_recordReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewOriginalSize_record()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &OriginalSize_recordReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *OriginalSize_recordReader) Read() (*OriginalSize_record, error) {
	t := NewOriginalSize_record()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
