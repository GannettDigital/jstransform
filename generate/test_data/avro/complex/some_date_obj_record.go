// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
package complex

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type SomeDateObj_record struct {
	Dates []int64 `json:"dates"`
}

const SomeDateObj_recordAvroCRC64Fingerprint = "Ò†LRM3\xa0\x97"

func NewSomeDateObj_record() *SomeDateObj_record {
	return &SomeDateObj_record{}
}

func DeserializeSomeDateObj_record(r io.Reader) (*SomeDateObj_record, error) {
	t := NewSomeDateObj_record()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeSomeDateObj_recordFromSchema(r io.Reader, schema string) (*SomeDateObj_record, error) {
	t := NewSomeDateObj_record()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeSomeDateObj_record(r *SomeDateObj_record, w io.Writer) error {
	var err error
	err = writeArrayLong(r.Dates, w)
	if err != nil {
		return err
	}
	return err
}

func (r *SomeDateObj_record) Serialize(w io.Writer) error {
	return writeSomeDateObj_record(r, w)
}

func (r *SomeDateObj_record) Schema() string {
	return "{\"fields\":[{\"name\":\"dates\",\"namespace\":\"Simple.someDateObj\",\"type\":{\"items\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"},\"type\":\"array\"}}],\"name\":\"Simple.someDateObj.someDateObj_record\",\"type\":\"record\"}"
}

func (r *SomeDateObj_record) SchemaName() string {
	return "Simple.someDateObj.someDateObj_record"
}

func (_ *SomeDateObj_record) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *SomeDateObj_record) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *SomeDateObj_record) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *SomeDateObj_record) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *SomeDateObj_record) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *SomeDateObj_record) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *SomeDateObj_record) SetString(v string)   { panic("Unsupported operation") }
func (_ *SomeDateObj_record) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SomeDateObj_record) Get(i int) types.Field {
	switch i {
	case 0:
		r.Dates = make([]int64, 0)

		return &ArrayLongWrapper{Target: &r.Dates}
	}
	panic("Unknown field index")
}

func (r *SomeDateObj_record) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *SomeDateObj_record) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *SomeDateObj_record) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *SomeDateObj_record) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *SomeDateObj_record) Finalize()                        {}

func (_ *SomeDateObj_record) AvroCRC64Fingerprint() []byte {
	return []byte(SomeDateObj_recordAvroCRC64Fingerprint)
}
