// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
package complex

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Complex struct {
	// The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.
	AvroWriteTime int64 `json:"AvroWriteTime"`
	// This is set to true when the Avro data is recording a delete in the source data.
	AvroDeleted bool `json:"AvroDeleted"`

	Height *UnionNullLong `json:"height"`

	SomeDateObj *UnionNullSomeDateObj_record `json:"someDateObj"`

	Visible bool `json:"visible"`

	Width *UnionNullDouble `json:"width"`

	Caption string `json:"caption"`

	Credit string `json:"credit"`

	Crops []*Crops_record `json:"crops"`

	Cutline *UnionNullString `json:"cutline"`

	DatePhotoTaken int64 `json:"datePhotoTaken"`

	Orientation string `json:"orientation"`

	OriginalSize *OriginalSize_record `json:"originalSize"`

	Type string `json:"type"`

	URL *URL_record `json:"URL"`
}

const ComplexAvroCRC64Fingerprint = "\x14c\x152\xc1\xea\x02J"

func NewComplex() *Complex {
	return &Complex{}
}

func DeserializeComplex(r io.Reader) (*Complex, error) {
	t := NewComplex()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeComplexFromSchema(r io.Reader, schema string) (*Complex, error) {
	t := NewComplex()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeComplex(r *Complex, w io.Writer) error {
	var err error
	err = vm.WriteLong(r.AvroWriteTime, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.AvroDeleted, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.Height, w)
	if err != nil {
		return err
	}
	err = writeUnionNullSomeDateObj_record(r.SomeDateObj, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Visible, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDouble(r.Width, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Caption, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Credit, w)
	if err != nil {
		return err
	}
	err = writeArrayCrops_record(r.Crops, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Cutline, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.DatePhotoTaken, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Orientation, w)
	if err != nil {
		return err
	}
	err = writeOriginalSize_record(r.OriginalSize, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Type, w)
	if err != nil {
		return err
	}
	err = writeURL_record(r.URL, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Complex) Serialize(w io.Writer) error {
	return writeComplex(r, w)
}

func (r *Complex) Schema() string {
	return "{\"fields\":[{\"doc\":\"The timestamp when this avro data is written. Useful for identifying the newest row of data sharing keys.\",\"logicalType\":\"timestamp-millis\",\"name\":\"AvroWriteTime\",\"type\":\"long\"},{\"default\":false,\"doc\":\"This is set to true when the Avro data is recording a delete in the source data.\",\"name\":\"AvroDeleted\",\"type\":\"boolean\"},{\"name\":\"height\",\"namespace\":\"Simple\",\"type\":[\"null\",\"long\"]},{\"name\":\"someDateObj\",\"namespace\":\"Simple\",\"type\":[\"null\",{\"fields\":[{\"name\":\"dates\",\"namespace\":\"Simple.someDateObj\",\"type\":{\"items\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"},\"type\":\"array\"}}],\"name\":\"someDateObj_record\",\"namespace\":\"Simple.someDateObj\",\"type\":\"record\"}]},{\"default\":false,\"name\":\"visible\",\"namespace\":\"Simple\",\"type\":\"boolean\"},{\"name\":\"width\",\"namespace\":\"Simple\",\"type\":[\"null\",\"double\"]},{\"name\":\"caption\",\"type\":\"string\"},{\"name\":\"credit\",\"type\":\"string\"},{\"name\":\"crops\",\"type\":{\"items\":{\"fields\":[{\"name\":\"height\",\"namespace\":\"crops\",\"type\":\"double\"},{\"name\":\"name\",\"namespace\":\"crops\",\"type\":\"string\"},{\"name\":\"path\",\"namespace\":\"crops\",\"type\":\"string\"},{\"name\":\"relativePath\",\"namespace\":\"crops\",\"type\":\"string\"},{\"name\":\"width\",\"namespace\":\"crops\",\"type\":\"double\"}],\"name\":\"crops_record\",\"namespace\":\"crops\",\"type\":\"record\"},\"type\":\"array\"}},{\"name\":\"cutline\",\"type\":[\"null\",\"string\"]},{\"name\":\"datePhotoTaken\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}},{\"name\":\"orientation\",\"type\":\"string\"},{\"name\":\"originalSize\",\"type\":{\"fields\":[{\"name\":\"height\",\"namespace\":\"originalSize\",\"type\":\"double\"},{\"name\":\"width\",\"namespace\":\"originalSize\",\"type\":\"double\"}],\"name\":\"originalSize_record\",\"namespace\":\"originalSize\",\"type\":\"record\"}},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"URL\",\"type\":{\"fields\":[{\"name\":\"absolute\",\"namespace\":\"URL\",\"type\":\"string\"},{\"name\":\"meta\",\"namespace\":\"URL\",\"type\":[\"null\",{\"fields\":[{\"name\":\"description\",\"namespace\":\"URL.meta\",\"type\":\"string\"},{\"name\":\"siteName\",\"namespace\":\"URL.meta\",\"type\":\"string\"}],\"name\":\"meta_record\",\"namespace\":\"URL.meta\",\"type\":\"record\"}]},{\"name\":\"publish\",\"namespace\":\"URL\",\"type\":\"string\"}],\"name\":\"URL_record\",\"namespace\":\"URL\",\"type\":\"record\"}}],\"name\":\"Complex\",\"type\":\"record\"}"
}

func (r *Complex) SchemaName() string {
	return "Complex"
}

func (_ *Complex) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Complex) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Complex) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Complex) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Complex) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Complex) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Complex) SetString(v string)   { panic("Unsupported operation") }
func (_ *Complex) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Complex) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.Long{Target: &r.AvroWriteTime}
	case 1:
		return &types.Boolean{Target: &r.AvroDeleted}
	case 2:
		r.Height = NewUnionNullLong()

		return r.Height
	case 3:
		r.SomeDateObj = NewUnionNullSomeDateObj_record()

		return r.SomeDateObj
	case 4:
		return &types.Boolean{Target: &r.Visible}
	case 5:
		r.Width = NewUnionNullDouble()

		return r.Width
	case 6:
		return &types.String{Target: &r.Caption}
	case 7:
		return &types.String{Target: &r.Credit}
	case 8:
		r.Crops = make([]*Crops_record, 0)

		return &ArrayCrops_recordWrapper{Target: &r.Crops}
	case 9:
		r.Cutline = NewUnionNullString()

		return r.Cutline
	case 10:
		return &types.Long{Target: &r.DatePhotoTaken}
	case 11:
		return &types.String{Target: &r.Orientation}
	case 12:
		r.OriginalSize = NewOriginalSize_record()

		return r.OriginalSize
	case 13:
		return &types.String{Target: &r.Type}
	case 14:
		r.URL = NewURL_record()

		return r.URL
	}
	panic("Unknown field index")
}

func (r *Complex) SetDefault(i int) {
	switch i {
	case 1:
		r.AvroDeleted = false
		return
	case 4:
		r.Visible = false
		return
	}
	panic("Unknown field index")
}

func (r *Complex) NullField(i int) {
	switch i {
	case 2:
		r.Height = nil
		return
	case 3:
		r.SomeDateObj = nil
		return
	case 5:
		r.Width = nil
		return
	case 9:
		r.Cutline = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ *Complex) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Complex) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Complex) Finalize()                        {}

func (_ *Complex) AvroCRC64Fingerprint() []byte {
	return []byte(ComplexAvroCRC64Fingerprint)
}
