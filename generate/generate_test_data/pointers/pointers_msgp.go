package pointers

// Code generated by github.com/GannettDigital/msgp DO NOT EDIT.

import (
	"time"

	"github.com/GannettDigital/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Complex) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Simple":
			err = z.Simple.DecodeMsg(dc)
			if err != nil {
				return
			}
		case "Caption":
			z.Caption, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Credit":
			z.Credit, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Crops":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Crops) >= int(zb0002) {
				z.Crops = (z.Crops)[:zb0002]
			} else {
				z.Crops = make([]ComplexCrops, zb0002)
			}
			for za0001 := range z.Crops {
				err = z.Crops[za0001].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Cutline":
			z.Cutline, err = dc.ReadString()
			if err != nil {
				return
			}
		case "DatePhotoTaken":
			z.DatePhotoTaken, err = dc.ReadTime()
			if err != nil {
				return
			}
		case "Orientation":
			z.Orientation, err = dc.ReadString()
			if err != nil {
				return
			}
		case "OriginalSize":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					return
				}
				switch msgp.UnsafeString(field) {
				case "Height":
					z.OriginalSize.Height, err = dc.ReadFloat64()
					if err != nil {
						return
					}
				case "Width":
					z.OriginalSize.Width, err = dc.ReadFloat64()
					if err != nil {
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						return
					}
				}
			}
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				return
			}
		case "URL":
			err = z.URL.DecodeMsg(dc)
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Complex) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "Simple"
	err = en.Append(0x8a, 0xa6, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = z.Simple.EncodeMsg(en)
	if err != nil {
		return
	}
	// write "Caption"
	err = en.Append(0xa7, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Caption)
	if err != nil {
		return
	}
	// write "Credit"
	err = en.Append(0xa6, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Credit)
	if err != nil {
		return
	}
	// write "Crops"
	err = en.Append(0xa5, 0x43, 0x72, 0x6f, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Crops)))
	if err != nil {
		return
	}
	for za0001 := range z.Crops {
		err = z.Crops[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	// write "Cutline"
	err = en.Append(0xa7, 0x43, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Cutline)
	if err != nil {
		return
	}
	// write "DatePhotoTaken"
	err = en.Append(0xae, 0x44, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteTime(z.DatePhotoTaken)
	if err != nil {
		return
	}
	// write "Orientation"
	err = en.Append(0xab, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Orientation)
	if err != nil {
		return
	}
	// write "OriginalSize"
	// map header, size 2
	// write "Height"
	err = en.Append(0xac, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.OriginalSize.Height)
	if err != nil {
		return
	}
	// write "Width"
	err = en.Append(0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.OriginalSize.Width)
	if err != nil {
		return
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		return
	}
	// write "URL"
	err = en.Append(0xa3, 0x55, 0x52, 0x4c)
	if err != nil {
		return
	}
	err = z.URL.EncodeMsg(en)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Complex) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "Simple"
	o = append(o, 0x8a, 0xa6, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65)
	o, err = z.Simple.MarshalMsg(o)
	if err != nil {
		return
	}
	// string "Caption"
	o = append(o, 0xa7, 0x43, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Caption)
	// string "Credit"
	o = append(o, 0xa6, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74)
	o = msgp.AppendString(o, z.Credit)
	// string "Crops"
	o = append(o, 0xa5, 0x43, 0x72, 0x6f, 0x70, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Crops)))
	for za0001 := range z.Crops {
		o, err = z.Crops[za0001].MarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Cutline"
	o = append(o, 0xa7, 0x43, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65)
	o = msgp.AppendString(o, z.Cutline)
	// string "DatePhotoTaken"
	o = append(o, 0xae, 0x44, 0x61, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x6b, 0x65, 0x6e)
	o = msgp.AppendTime(o, z.DatePhotoTaken)
	// string "Orientation"
	o = append(o, 0xab, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Orientation)
	// string "OriginalSize"
	// map header, size 2
	// string "Height"
	o = append(o, 0xac, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendFloat64(o, z.OriginalSize.Height)
	// string "Width"
	o = append(o, 0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	o = msgp.AppendFloat64(o, z.OriginalSize.Width)
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "URL"
	o = append(o, 0xa3, 0x55, 0x52, 0x4c)
	o, err = z.URL.MarshalMsg(o)
	if err != nil {
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Complex) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Simple":
			bts, err = z.Simple.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		case "Caption":
			z.Caption, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Credit":
			z.Credit, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Crops":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Crops) >= int(zb0002) {
				z.Crops = (z.Crops)[:zb0002]
			} else {
				z.Crops = make([]ComplexCrops, zb0002)
			}
			for za0001 := range z.Crops {
				bts, err = z.Crops[za0001].UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		case "Cutline":
			z.Cutline, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "DatePhotoTaken":
			z.DatePhotoTaken, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				return
			}
		case "Orientation":
			z.Orientation, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "OriginalSize":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					return
				}
				switch msgp.UnsafeString(field) {
				case "Height":
					z.OriginalSize.Height, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						return
					}
				case "Width":
					z.OriginalSize.Width, bts, err = msgp.ReadFloat64Bytes(bts)
					if err != nil {
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						return
					}
				}
			}
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "URL":
			bts, err = z.URL.UnmarshalMsg(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Complex) Msgsize() (s int) {
	s = 1 + 7 + z.Simple.Msgsize() + 8 + msgp.StringPrefixSize + len(z.Caption) + 7 + msgp.StringPrefixSize + len(z.Credit) + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Crops {
		s += z.Crops[za0001].Msgsize()
	}
	s += 8 + msgp.StringPrefixSize + len(z.Cutline) + 15 + msgp.TimeSize + 12 + msgp.StringPrefixSize + len(z.Orientation) + 13 + 1 + 7 + msgp.Float64Size + 6 + msgp.Float64Size + 5 + msgp.StringPrefixSize + len(z.Type) + 4 + z.URL.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ComplexCrops) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Height":
			z.Height, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Path":
			z.Path, err = dc.ReadString()
			if err != nil {
				return
			}
		case "RelativePath":
			z.RelativePath, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Width":
			z.Width, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ComplexCrops) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Height"
	err = en.Append(0x85, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Height)
	if err != nil {
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		return
	}
	// write "Path"
	err = en.Append(0xa4, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Path)
	if err != nil {
		return
	}
	// write "RelativePath"
	err = en.Append(0xac, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.RelativePath)
	if err != nil {
		return
	}
	// write "Width"
	err = en.Append(0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Width)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ComplexCrops) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Height"
	o = append(o, 0x85, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendFloat64(o, z.Height)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Path"
	o = append(o, 0xa4, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Path)
	// string "RelativePath"
	o = append(o, 0xac, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.RelativePath)
	// string "Width"
	o = append(o, 0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	o = msgp.AppendFloat64(o, z.Width)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ComplexCrops) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Height":
			z.Height, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				return
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Path":
			z.Path, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "RelativePath":
			z.RelativePath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Width":
			z.Width, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ComplexCrops) Msgsize() (s int) {
	s = 1 + 7 + msgp.Float64Size + 5 + msgp.StringPrefixSize + len(z.Name) + 5 + msgp.StringPrefixSize + len(z.Path) + 13 + msgp.StringPrefixSize + len(z.RelativePath) + 6 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ComplexOriginalSize) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Height":
			z.Height, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		case "Width":
			z.Width, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ComplexOriginalSize) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Height"
	err = en.Append(0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Height)
	if err != nil {
		return
	}
	// write "Width"
	err = en.Append(0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Width)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ComplexOriginalSize) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Height"
	o = append(o, 0x82, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendFloat64(o, z.Height)
	// string "Width"
	o = append(o, 0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	o = msgp.AppendFloat64(o, z.Width)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ComplexOriginalSize) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Height":
			z.Height, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				return
			}
		case "Width":
			z.Width, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ComplexOriginalSize) Msgsize() (s int) {
	s = 1 + 7 + msgp.Float64Size + 6 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ComplexURL) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Absolute":
			z.Absolute, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Meta":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.Meta = nil
			} else {
				if z.Meta == nil {
					z.Meta = new(ComplexURLMeta)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "Description":
						z.Meta.Description, err = dc.ReadString()
						if err != nil {
							return
						}
					case "SiteName":
						z.Meta.SiteName, err = dc.ReadString()
						if err != nil {
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		case "Publish":
			z.Publish, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ComplexURL) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Absolute"
	err = en.Append(0x83, 0xa8, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Absolute)
	if err != nil {
		return
	}
	// write "Meta"
	err = en.Append(0xa4, 0x4d, 0x65, 0x74, 0x61)
	if err != nil {
		return
	}
	if z.Meta == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 2
		// write "Description"
		err = en.Append(0x82, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteString(z.Meta.Description)
		if err != nil {
			return
		}
		// write "SiteName"
		err = en.Append(0xa8, 0x53, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Meta.SiteName)
		if err != nil {
			return
		}
	}
	// write "Publish"
	err = en.Append(0xa7, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Publish)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ComplexURL) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Absolute"
	o = append(o, 0x83, 0xa8, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65)
	o = msgp.AppendString(o, z.Absolute)
	// string "Meta"
	o = append(o, 0xa4, 0x4d, 0x65, 0x74, 0x61)
	if z.Meta == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 2
		// string "Description"
		o = append(o, 0x82, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
		o = msgp.AppendString(o, z.Meta.Description)
		// string "SiteName"
		o = append(o, 0xa8, 0x53, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Meta.SiteName)
	}
	// string "Publish"
	o = append(o, 0xa7, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68)
	o = msgp.AppendString(o, z.Publish)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ComplexURL) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Absolute":
			z.Absolute, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Meta":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Meta = nil
			} else {
				if z.Meta == nil {
					z.Meta = new(ComplexURLMeta)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "Description":
						z.Meta.Description, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							return
						}
					case "SiteName":
						z.Meta.SiteName, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
			}
		case "Publish":
			z.Publish, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ComplexURL) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.Absolute) + 5
	if z.Meta == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 12 + msgp.StringPrefixSize + len(z.Meta.Description) + 9 + msgp.StringPrefixSize + len(z.Meta.SiteName)
	}
	s += 8 + msgp.StringPrefixSize + len(z.Publish)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ComplexURLMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Description":
			z.Description, err = dc.ReadString()
			if err != nil {
				return
			}
		case "SiteName":
			z.SiteName, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ComplexURLMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Description"
	err = en.Append(0x82, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		return
	}
	// write "SiteName"
	err = en.Append(0xa8, 0x53, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.SiteName)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ComplexURLMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Description"
	o = append(o, 0x82, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "SiteName"
	o = append(o, 0xa8, 0x53, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.SiteName)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ComplexURLMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "SiteName":
			z.SiteName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ComplexURLMeta) Msgsize() (s int) {
	s = 1 + 12 + msgp.StringPrefixSize + len(z.Description) + 9 + msgp.StringPrefixSize + len(z.SiteName)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Nested) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "FactCheckClaims":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.FactCheckClaims) >= int(zb0002) {
				z.FactCheckClaims = (z.FactCheckClaims)[:zb0002]
			} else {
				z.FactCheckClaims = make([]NestedFactCheckClaims, zb0002)
			}
			for za0001 := range z.FactCheckClaims {
				err = z.FactCheckClaims[za0001].DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Nested) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "FactCheckClaims"
	err = en.Append(0x81, 0xaf, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.FactCheckClaims)))
	if err != nil {
		return
	}
	for za0001 := range z.FactCheckClaims {
		err = z.FactCheckClaims[za0001].EncodeMsg(en)
		if err != nil {
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Nested) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "FactCheckClaims"
	o = append(o, 0x81, 0xaf, 0x46, 0x61, 0x63, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.FactCheckClaims)))
	for za0001 := range z.FactCheckClaims {
		o, err = z.FactCheckClaims[za0001].MarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Nested) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "FactCheckClaims":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.FactCheckClaims) >= int(zb0002) {
				z.FactCheckClaims = (z.FactCheckClaims)[:zb0002]
			} else {
				z.FactCheckClaims = make([]NestedFactCheckClaims, zb0002)
			}
			for za0001 := range z.FactCheckClaims {
				bts, err = z.FactCheckClaims[za0001].UnmarshalMsg(bts)
				if err != nil {
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Nested) Msgsize() (s int) {
	s = 1 + 16 + msgp.ArrayHeaderSize
	for za0001 := range z.FactCheckClaims {
		s += z.FactCheckClaims[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NestedFactCheckClaims) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "AppearanceURLs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.AppearanceURLs) >= int(zb0002) {
				z.AppearanceURLs = (z.AppearanceURLs)[:zb0002]
			} else {
				z.AppearanceURLs = make([]*NestedFactCheckClaimsAppearanceURLs, zb0002)
			}
			for za0001 := range z.AppearanceURLs {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}
					z.AppearanceURLs[za0001] = nil
				} else {
					if z.AppearanceURLs[za0001] == nil {
						z.AppearanceURLs[za0001] = new(NestedFactCheckClaimsAppearanceURLs)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Original":
							z.AppearanceURLs[za0001].Original, err = dc.ReadBool()
							if err != nil {
								return
							}
						case "Url":
							z.AppearanceURLs[za0001].Url, err = dc.ReadString()
							if err != nil {
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "Author":
			z.Author, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Claim":
			z.Claim, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Date":
			z.Date, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Rating":
			z.Rating, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *NestedFactCheckClaims) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "AppearanceURLs"
	err = en.Append(0x85, 0xae, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.AppearanceURLs)))
	if err != nil {
		return
	}
	for za0001 := range z.AppearanceURLs {
		if z.AppearanceURLs[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "Original"
			err = en.Append(0x82, 0xa8, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c)
			if err != nil {
				return
			}
			err = en.WriteBool(z.AppearanceURLs[za0001].Original)
			if err != nil {
				return
			}
			// write "Url"
			err = en.Append(0xa3, 0x55, 0x72, 0x6c)
			if err != nil {
				return
			}
			err = en.WriteString(z.AppearanceURLs[za0001].Url)
			if err != nil {
				return
			}
		}
	}
	// write "Author"
	err = en.Append(0xa6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Author)
	if err != nil {
		return
	}
	// write "Claim"
	err = en.Append(0xa5, 0x43, 0x6c, 0x61, 0x69, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteString(z.Claim)
	if err != nil {
		return
	}
	// write "Date"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Date)
	if err != nil {
		return
	}
	// write "Rating"
	err = en.Append(0xa6, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.Rating)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NestedFactCheckClaims) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "AppearanceURLs"
	o = append(o, 0x85, 0xae, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.AppearanceURLs)))
	for za0001 := range z.AppearanceURLs {
		if z.AppearanceURLs[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "Original"
			o = append(o, 0x82, 0xa8, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c)
			o = msgp.AppendBool(o, z.AppearanceURLs[za0001].Original)
			// string "Url"
			o = append(o, 0xa3, 0x55, 0x72, 0x6c)
			o = msgp.AppendString(o, z.AppearanceURLs[za0001].Url)
		}
	}
	// string "Author"
	o = append(o, 0xa6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Author)
	// string "Claim"
	o = append(o, 0xa5, 0x43, 0x6c, 0x61, 0x69, 0x6d)
	o = msgp.AppendString(o, z.Claim)
	// string "Date"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x65)
	o = msgp.AppendString(o, z.Date)
	// string "Rating"
	o = append(o, 0xa6, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67)
	o = msgp.AppendString(o, z.Rating)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NestedFactCheckClaims) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "AppearanceURLs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.AppearanceURLs) >= int(zb0002) {
				z.AppearanceURLs = (z.AppearanceURLs)[:zb0002]
			} else {
				z.AppearanceURLs = make([]*NestedFactCheckClaimsAppearanceURLs, zb0002)
			}
			for za0001 := range z.AppearanceURLs {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.AppearanceURLs[za0001] = nil
				} else {
					if z.AppearanceURLs[za0001] == nil {
						z.AppearanceURLs[za0001] = new(NestedFactCheckClaimsAppearanceURLs)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "Original":
							z.AppearanceURLs[za0001].Original, bts, err = msgp.ReadBoolBytes(bts)
							if err != nil {
								return
							}
						case "Url":
							z.AppearanceURLs[za0001].Url, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "Author":
			z.Author, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Claim":
			z.Claim, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Date":
			z.Date, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Rating":
			z.Rating, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NestedFactCheckClaims) Msgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for za0001 := range z.AppearanceURLs {
		if z.AppearanceURLs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 9 + msgp.BoolSize + 4 + msgp.StringPrefixSize + len(z.AppearanceURLs[za0001].Url)
		}
	}
	s += 7 + msgp.StringPrefixSize + len(z.Author) + 6 + msgp.StringPrefixSize + len(z.Claim) + 5 + msgp.StringPrefixSize + len(z.Date) + 7 + msgp.StringPrefixSize + len(z.Rating)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NestedFactCheckClaimsAppearanceURLs) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Original":
			z.Original, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Url":
			z.Url, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z NestedFactCheckClaimsAppearanceURLs) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Original"
	err = en.Append(0x82, 0xa8, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Original)
	if err != nil {
		return
	}
	// write "Url"
	err = en.Append(0xa3, 0x55, 0x72, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Url)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z NestedFactCheckClaimsAppearanceURLs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Original"
	o = append(o, 0x82, 0xa8, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c)
	o = msgp.AppendBool(o, z.Original)
	// string "Url"
	o = append(o, 0xa3, 0x55, 0x72, 0x6c)
	o = msgp.AppendString(o, z.Url)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NestedFactCheckClaimsAppearanceURLs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Original":
			z.Original, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				return
			}
		case "Url":
			z.Url, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z NestedFactCheckClaimsAppearanceURLs) Msgsize() (s int) {
	s = 1 + 9 + msgp.BoolSize + 4 + msgp.StringPrefixSize + len(z.Url)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Simple) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Contributors":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Contributors) >= int(zb0002) {
				z.Contributors = (z.Contributors)[:zb0002]
			} else {
				z.Contributors = make([]*SimpleContributors, zb0002)
			}
			for za0001 := range z.Contributors {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}
					z.Contributors[za0001] = nil
				} else {
					if z.Contributors[za0001] == nil {
						z.Contributors[za0001] = new(SimpleContributors)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "ContributorId":
							z.Contributors[za0001].ContributorId, err = dc.ReadString()
							if err != nil {
								return
							}
						case "Id":
							z.Contributors[za0001].Id, err = dc.ReadString()
							if err != nil {
								return
							}
						case "Name":
							z.Contributors[za0001].Name, err = dc.ReadString()
							if err != nil {
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "Height":
			z.Height, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "SomeDateObj":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.SomeDateObj = nil
			} else {
				if z.SomeDateObj == nil {
					z.SomeDateObj = new(SimpleSomeDateObj)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "Dates":
						var zb0005 uint32
						zb0005, err = dc.ReadArrayHeader()
						if err != nil {
							return
						}
						if cap(z.SomeDateObj.Dates) >= int(zb0005) {
							z.SomeDateObj.Dates = (z.SomeDateObj.Dates)[:zb0005]
						} else {
							z.SomeDateObj.Dates = make([]*time.Time, zb0005)
						}
						for za0002 := range z.SomeDateObj.Dates {
							if dc.IsNil() {
								err = dc.ReadNil()
								if err != nil {
									return
								}
								z.SomeDateObj.Dates[za0002] = nil
							} else {
								if z.SomeDateObj.Dates[za0002] == nil {
									z.SomeDateObj.Dates[za0002] = new(time.Time)
								}
								*z.SomeDateObj.Dates[za0002], err = dc.ReadTime()
								if err != nil {
									return
								}
							}
						}
					default:
						err = dc.Skip()
						if err != nil {
							return
						}
					}
				}
			}
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Visible":
			z.Visible, err = dc.ReadBool()
			if err != nil {
				return
			}
		case "Width":
			z.Width, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Simple) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Contributors"
	err = en.Append(0x86, 0xac, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Contributors)))
	if err != nil {
		return
	}
	for za0001 := range z.Contributors {
		if z.Contributors[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 3
			// write "ContributorId"
			err = en.Append(0x83, 0xad, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(z.Contributors[za0001].ContributorId)
			if err != nil {
				return
			}
			// write "Id"
			err = en.Append(0xa2, 0x49, 0x64)
			if err != nil {
				return
			}
			err = en.WriteString(z.Contributors[za0001].Id)
			if err != nil {
				return
			}
			// write "Name"
			err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.Contributors[za0001].Name)
			if err != nil {
				return
			}
		}
	}
	// write "Height"
	err = en.Append(0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Height)
	if err != nil {
		return
	}
	// write "SomeDateObj"
	err = en.Append(0xab, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a)
	if err != nil {
		return
	}
	if z.SomeDateObj == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// map header, size 1
		// write "Dates"
		err = en.Append(0x81, 0xa5, 0x44, 0x61, 0x74, 0x65, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.SomeDateObj.Dates)))
		if err != nil {
			return
		}
		for za0002 := range z.SomeDateObj.Dates {
			if z.SomeDateObj.Dates[za0002] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = en.WriteTime(*z.SomeDateObj.Dates[za0002])
				if err != nil {
					return
				}
			}
		}
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		return
	}
	// write "Visible"
	err = en.Append(0xa7, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Visible)
	if err != nil {
		return
	}
	// write "Width"
	err = en.Append(0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Width)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Simple) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Contributors"
	o = append(o, 0x86, 0xac, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Contributors)))
	for za0001 := range z.Contributors {
		if z.Contributors[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 3
			// string "ContributorId"
			o = append(o, 0x83, 0xad, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64)
			o = msgp.AppendString(o, z.Contributors[za0001].ContributorId)
			// string "Id"
			o = append(o, 0xa2, 0x49, 0x64)
			o = msgp.AppendString(o, z.Contributors[za0001].Id)
			// string "Name"
			o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
			o = msgp.AppendString(o, z.Contributors[za0001].Name)
		}
	}
	// string "Height"
	o = append(o, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt64(o, z.Height)
	// string "SomeDateObj"
	o = append(o, 0xab, 0x53, 0x6f, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a)
	if z.SomeDateObj == nil {
		o = msgp.AppendNil(o)
	} else {
		// map header, size 1
		// string "Dates"
		o = append(o, 0x81, 0xa5, 0x44, 0x61, 0x74, 0x65, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.SomeDateObj.Dates)))
		for za0002 := range z.SomeDateObj.Dates {
			if z.SomeDateObj.Dates[za0002] == nil {
				o = msgp.AppendNil(o)
			} else {
				o = msgp.AppendTime(o, *z.SomeDateObj.Dates[za0002])
			}
		}
	}
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "Visible"
	o = append(o, 0xa7, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65)
	o = msgp.AppendBool(o, z.Visible)
	// string "Width"
	o = append(o, 0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	o = msgp.AppendFloat64(o, z.Width)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Simple) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Contributors":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Contributors) >= int(zb0002) {
				z.Contributors = (z.Contributors)[:zb0002]
			} else {
				z.Contributors = make([]*SimpleContributors, zb0002)
			}
			for za0001 := range z.Contributors {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Contributors[za0001] = nil
				} else {
					if z.Contributors[za0001] == nil {
						z.Contributors[za0001] = new(SimpleContributors)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							return
						}
						switch msgp.UnsafeString(field) {
						case "ContributorId":
							z.Contributors[za0001].ContributorId, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						case "Id":
							z.Contributors[za0001].Id, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						case "Name":
							z.Contributors[za0001].Name, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								return
							}
						}
					}
				}
			}
		case "Height":
			z.Height, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				return
			}
		case "SomeDateObj":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SomeDateObj = nil
			} else {
				if z.SomeDateObj == nil {
					z.SomeDateObj = new(SimpleSomeDateObj)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						return
					}
					switch msgp.UnsafeString(field) {
					case "Dates":
						var zb0005 uint32
						zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							return
						}
						if cap(z.SomeDateObj.Dates) >= int(zb0005) {
							z.SomeDateObj.Dates = (z.SomeDateObj.Dates)[:zb0005]
						} else {
							z.SomeDateObj.Dates = make([]*time.Time, zb0005)
						}
						for za0002 := range z.SomeDateObj.Dates {
							if msgp.IsNil(bts) {
								bts, err = msgp.ReadNilBytes(bts)
								if err != nil {
									return
								}
								z.SomeDateObj.Dates[za0002] = nil
							} else {
								if z.SomeDateObj.Dates[za0002] == nil {
									z.SomeDateObj.Dates[za0002] = new(time.Time)
								}
								*z.SomeDateObj.Dates[za0002], bts, err = msgp.ReadTimeBytes(bts)
								if err != nil {
									return
								}
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							return
						}
					}
				}
			}
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Visible":
			z.Visible, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				return
			}
		case "Width":
			z.Width, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Simple) Msgsize() (s int) {
	s = 1 + 13 + msgp.ArrayHeaderSize
	for za0001 := range z.Contributors {
		if z.Contributors[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 14 + msgp.StringPrefixSize + len(z.Contributors[za0001].ContributorId) + 3 + msgp.StringPrefixSize + len(z.Contributors[za0001].Id) + 5 + msgp.StringPrefixSize + len(z.Contributors[za0001].Name)
		}
	}
	s += 7 + msgp.Int64Size + 12
	if z.SomeDateObj == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 6 + msgp.ArrayHeaderSize
		for za0002 := range z.SomeDateObj.Dates {
			if z.SomeDateObj.Dates[za0002] == nil {
				s += msgp.NilSize
			} else {
				s += msgp.TimeSize
			}
		}
	}
	s += 5 + msgp.StringPrefixSize + len(z.Type) + 8 + msgp.BoolSize + 6 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SimpleContributors) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "ContributorId":
			z.ContributorId, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				return
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SimpleContributors) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "ContributorId"
	err = en.Append(0x83, 0xad, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ContributorId)
	if err != nil {
		return
	}
	// write "Id"
	err = en.Append(0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SimpleContributors) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ContributorId"
	o = append(o, 0x83, 0xad, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x49, 0x64)
	o = msgp.AppendString(o, z.ContributorId)
	// string "Id"
	o = append(o, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SimpleContributors) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "ContributorId":
			z.ContributorId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SimpleContributors) Msgsize() (s int) {
	s = 1 + 14 + msgp.StringPrefixSize + len(z.ContributorId) + 3 + msgp.StringPrefixSize + len(z.Id) + 5 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SimpleSomeDateObj) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Dates":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				return
			}
			if cap(z.Dates) >= int(zb0002) {
				z.Dates = (z.Dates)[:zb0002]
			} else {
				z.Dates = make([]*time.Time, zb0002)
			}
			for za0001 := range z.Dates {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						return
					}
					z.Dates[za0001] = nil
				} else {
					if z.Dates[za0001] == nil {
						z.Dates[za0001] = new(time.Time)
					}
					*z.Dates[za0001], err = dc.ReadTime()
					if err != nil {
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SimpleSomeDateObj) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Dates"
	err = en.Append(0x81, 0xa5, 0x44, 0x61, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Dates)))
	if err != nil {
		return
	}
	for za0001 := range z.Dates {
		if z.Dates[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteTime(*z.Dates[za0001])
			if err != nil {
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SimpleSomeDateObj) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Dates"
	o = append(o, 0x81, 0xa5, 0x44, 0x61, 0x74, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Dates)))
	for za0001 := range z.Dates {
		if z.Dates[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendTime(o, *z.Dates[za0001])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SimpleSomeDateObj) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "Dates":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if cap(z.Dates) >= int(zb0002) {
				z.Dates = (z.Dates)[:zb0002]
			} else {
				z.Dates = make([]*time.Time, zb0002)
			}
			for za0001 := range z.Dates {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Dates[za0001] = nil
				} else {
					if z.Dates[za0001] == nil {
						z.Dates[za0001] = new(time.Time)
					}
					*z.Dates[za0001], bts, err = msgp.ReadTimeBytes(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SimpleSomeDateObj) Msgsize() (s int) {
	s = 1 + 6 + msgp.ArrayHeaderSize
	for za0001 := range z.Dates {
		if z.Dates[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.TimeSize
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Times) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "NonRequiredDate":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}
				z.NonRequiredDate = nil
			} else {
				if z.NonRequiredDate == nil {
					z.NonRequiredDate = new(time.Time)
				}
				*z.NonRequiredDate, err = dc.ReadTime()
				if err != nil {
					return
				}
			}
		case "RequiredDate":
			z.RequiredDate, err = dc.ReadTime()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Times) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "NonRequiredDate"
	err = en.Append(0x82, 0xaf, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	if z.NonRequiredDate == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteTime(*z.NonRequiredDate)
		if err != nil {
			return
		}
	}
	// write "RequiredDate"
	err = en.Append(0xac, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.RequiredDate)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Times) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "NonRequiredDate"
	o = append(o, 0x82, 0xaf, 0x4e, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65)
	if z.NonRequiredDate == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendTime(o, *z.NonRequiredDate)
	}
	// string "RequiredDate"
	o = append(o, 0xac, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65)
	o = msgp.AppendTime(o, z.RequiredDate)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Times) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			return
		}
		switch msgp.UnsafeString(field) {
		case "NonRequiredDate":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.NonRequiredDate = nil
			} else {
				if z.NonRequiredDate == nil {
					z.NonRequiredDate = new(time.Time)
				}
				*z.NonRequiredDate, bts, err = msgp.ReadTimeBytes(bts)
				if err != nil {
					return
				}
			}
		case "RequiredDate":
			z.RequiredDate, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Times) Msgsize() (s int) {
	s = 1 + 16
	if z.NonRequiredDate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.TimeSize
	}
	s += 13 + msgp.TimeSize
	return
}
