{
	"id": "http://json-schema.org/draft-04/schema#",
	"$schema": "http://json-schema.org/draft-04/schema#",
	"description": "Core schema meta-schema",
	"definitions": {
		"transform": {
			"description": "Describes how the source data is transformed",
			"type": "object",
			"required": [
				"from"
			],
			"additionalProperties": false,
			"properties": {
				"method": {
					"description": "Describes in which order the transformed data is applied",
					"default": "first",
					"type": "string",
					"enum": [
						"first",
						"last",
						"concatenate"
					]
				},
				"methodOptions": {
					"description": "Describes options to be passed along to the chosen method",
					"type": "object",
					"properties": {
						"concatenateDelimiter": {
							"description": "Optional delimiter to use when concatenating multiple jsonPath items",
							"type": "string"
						}
					}
				},
				"from": {
					"description": "Describes where the input data comes from",
					"type": "array",
					"minItems": 1,
					"uniqueItems": true,
					"items": {
						"$ref": "#/definitions/transformFrom"
					}
				}
			}
		},
		"transformFrom": {
			"type": "object",
			"properties": {
				"jsonPath": {
					"$ref": "#/definitions/jsonPath"
				},
				"xmlPath": {
					"$ref": "#/definitions/xmlPath"
				},
				"operations": {
					"description": "Operations allows for further mutation of data",
					"type": "array",
					"minItems": 1,
					"uniqueItems": true,
					"items": {
						"oneOf": [{
								"$ref": "#/definitions/operations/caseChange"
							},
              {
								"$ref": "#/definitions/operations/currentTime"
							},
							{
								"$ref": "#/definitions/operations/inverse"
							},
							{
								"$ref": "#/definitions/operations/split"
							},
							{
								"$ref": "#/definitions/operations/replace"
							},
							{
								"$ref": "#/definitions/operations/max"
							},
							{
								"$ref": "#/definitions/operations/timeParse"
							},
							{
								"$ref": "#/definitions/operations/toCamelCase"
							},
							{
								"$ref": "#/definitions/operations/stringToInteger"
							},
							{
								"$ref": "#/definitions/operations/stringToFloat"
							}
						]
					}
				}
			}
		},
		"jsonPath": {
			"type": "string",
			"pattern": "^[@$](?:(?:\\.\\S+)|(?:\\['\\S+'\\]))+$"
		},
		"xmlPath": {
			"type": "string"
		},
		"operations": {
			"caseChange": {
				"description": "Accepts a string, returns a string",
				"type": "object",
				"required": [
					"type",
					"args"
				],
				"additionalProperties": false,
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"changeCase"
						]
					},
					"args": {
						"type": "object",
						"required": [
							"to"
						],
						"additionalProperties": false,
						"properties": {
							"to": {
								"description": "The case to change to",
								"type": "string",
								"enum": [
									"lower",
									"upper"
								]
							}
						}
					}
				}
			},
			"currentTime": {
				"description": "Returns the current time formatted as a string",
				"type": "object",
				"required": [
					"args"
				],
				"additionalProperties": false,
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"currentTime"
						]
					},
					"args": {
						"type": "object",
						"required": [
							"format"
						],
						"additionalProperties": false,
						"properties": {
							"format": {
								"description": "The format to parse the time string"
							}
						}
					}
				}
			}
		},
		"inverse": {
			"description": "Accepts boolean as input, returns inverse boolean",
			"type": "object",
			"required": [
				"type"
			],
			"additionalProperties": false,
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"inverse"
					]
				}
			}
		},
		"split": {
			"description": "Accepts a string and returns an array",
			"type": "object",
			"required": [
				"type",
				"args"
			],
			"additionalProperties": false,
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"split"
					]
				},
				"args": {
					"type": "object",
					"required": [
						"on"
					],
					"additionalProperties": false,
					"properties": {
						"on": {
							"description": "The string to split on",
							"type": "string"
						}
					}
				}
			}
		},
		"replace": {
			"description": "Accepts a string, returns a string",
			"type": "object",
			"required": [
				"type",
				"args"
			],
			"additionalProperties": false,
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"replace"
					]
				},
				"args": {
					"type": "object",
					"required": [
						"regex",
						"new"
					],
					"additionalProperties": false,
					"properties": {
						"regex": {
							"description": "Regex string that must have 1 capture group that will be used to match the part of the string that will be replaced",
							"type": "string"
						},
						"new": {
							"description": "The value that will replace capture group 1 in the above regex",
							"type": "string"
						}
					}
				}
			}
		},
		"max": {
			"description": "Accepts an array and finds the max valuye of these items. Can return a generic or a complex object",
			"type": "object",
			"required": [
				"type",
				"args"
			],
			"additionalProperties": false,
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"max"
					]
				},
				"args": {
					"type": "object",
					"required": [
						"by",
						"return"
					],
					"additionalProperties": false,
					"properties": {
						"by": {
							"descripition": "A JSON path selector that identifies a number to take the max of",
							"$ref": "#/definitions/jsonPath"
						},
						"return": {
							"description": "A JSON path selector that identifies the property to return of that item",
							"$ref": "#/definitions/jsonPath"
						}
					}
				}
			}
		},
		"timeParse": {
			"description": "Accepts a time string, formats and then layouts and returns a string",
			"type": "object",
			"required": [
				"type",
				"args"
			],
			"additionalProperties": false,
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"timeParse"
					]
				},
				"args": {
					"type": "object",
					"required": [
						"format",
						"layout"
					],
					"additionalProperties": false,
					"properties": {
						"format": {
							"description": "The format to parse the time string",
							"type": "string"
						},
						"layout": {
							"description": "The layout to put the time string into",
							"type": "string"
						}
					}
				}
			}
		},
		"stringToInteger": {
			"description": "Accepts a string, converts it into an Integer and returns that Integer",
			"type": "object",
			"required": [
				"type"
			],
			"additionalProperties": false,
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"stringToInteger"
					]
				}
			}
		},
		"stringToFloat": {
			"description": "Accepts a string, converts it into a Float and returns that number",
			"type": "object",
			"required": [
				"type"
			],
			"additionalProperties": false,
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"stringToFloat"
					]
				}
			}
		},
		"toCamelCase": {
			"description": "Accepts a string and delimiter, splits the string on the delimiter and returns a new camel case string",
			"type": "object",
			"required": [
				"type",
				"args"
			],
			"additionalProperties": false,
			"properties": {
				"type": {
					"type": "string",
					"enum": [
						"toCamelCase"
					]
				},
				"args": {
					"type": "object",
					"required": [
						"delimiter"
					],
					"additionalProperties": false,
					"properties": {
						"format": {
							"description": "The delimiter to split the string on",
							"type": "string"
						}
					}
				}
			}
		}
	},
	"schemaArray": {
		"type": "array",
		"minItems": 1,
		"items": {
			"$ref": "#"
		}
	},
	"positiveInteger": {
		"type": "integer",
		"minimum": 0
	},
	"positiveIntegerDefault0": {
		"allOf": [{
			"$ref": "#/definitions/positiveInteger"
		}, {
			"default": 0
		}]
	},
	"simpleTypes": {
		"enum": ["array", "boolean", "integer", "null", "number", "object", "string"]
	},
	"stringArray": {
		"type": "array",
		"items": {
			"type": "string"
		},
		"minItems": 1,
		"uniqueItems": true
	},
	"type": "object",
	"properties": {
		"transform": {
			"type": "object",
			"properties": {
				"cumulo": {
					"$ref": "#/definitions/transform"
				},
				"presentationv4": {
					"$ref": "#/definitions/transform"
				}
			}
		},
		"id": {
			"type": "string",
			"format": "uri"
		},
		"$schema": {
			"type": "string",
			"format": "uri"
		},
		"title": {
			"type": "string"
		},
		"description": {
			"type": "string"
		},
		"default": {},
		"multipleOf": {
			"type": "number",
			"minimum": 0,
			"exclusiveMinimum": true
		},
		"maximum": {
			"type": "number"
		},
		"exclusiveMaximum": {
			"type": "boolean",
			"default": false
		},
		"minimum": {
			"type": "number"
		},
		"exclusiveMinimum": {
			"type": "boolean",
			"default": false
		},
		"maxLength": {
			"$ref": "#/definitions/positiveInteger"
		},
		"minLength": {
			"$ref": "#/definitions/positiveIntegerDefault0"
		},
		"pattern": {
			"type": "string",
			"format": "regex"
		},
		"additionalItems": {
			"anyOf": [{
					"type": "boolean"
				},
				{
					"$ref": "#"
				}
			],
			"default": {}
		},
		"items": {
			"anyOf": [{
					"$ref": "#"
				},
				{
					"$ref": "#/definitions/schemaArray"
				}
			],
			"default": {}
		},
		"maxItems": {
			"$ref": "#/definitions/positiveInteger"
		},
		"minItems": {
			"$ref": "#/definitions/positiveIntegerDefault0"
		},
		"uniqueItems": {
			"type": "boolean",
			"default": false
		},
		"maxProperties": {
			"$ref": "#/definitions/positiveInteger"
		},
		"minProperties": {
			"$ref": "#/definitions/positiveIntegerDefault0"
		},
		"required": {
			"$ref": "#/definitions/stringArray"
		},
		"additionalProperties": {
			"anyOf": [{
					"type": "boolean"
				},
				{
					"$ref": "#"
				}
			],
			"default": {}
		},
		"definitions": {
			"type": "object",
			"additionalProperties": {
				"$ref": "#"
			},
			"default": {}
		},
		"properties": {
			"type": "object",
			"additionalProperties": {
				"$ref": "#"
			},
			"default": {}
		},
		"patternProperties": {
			"type": "object",
			"additionalProperties": {
				"$ref": "#"
			},
			"default": {}
		},
		"dependencies": {
			"type": "object",
			"additionalProperties": {
				"anyOf": [{
						"$ref": "#"
					},
					{
						"$ref": "#/definitions/stringArray"
					}
				]
			}
		},
		"enum": {
			"type": "array",
			"minItems": 1,
			"uniqueItems": true
		},
		"type": {
			"anyOf": [{
					"$ref": "#/definitions/simpleTypes"
				},
				{
					"type": "array",
					"items": {
						"$ref": "#/definitions/simpleTypes"
					},
					"minItems": 1,
					"uniqueItems": true
				}
			]
		},
		"allOf": {
			"$ref": "#/definitions/schemaArray"
		},
		"anyOf": {
			"$ref": "#/definitions/schemaArray"
		},
		"oneOf": {
			"$ref": "#/definitions/schemaArray"
		},
		"not": {
			"$ref": "#"
		}
	},
	"dependencies": {
		"exclusiveMaximum": ["maximum"],
		"exclusiveMinimum": ["minimum"]
	},
	"default": {}
}